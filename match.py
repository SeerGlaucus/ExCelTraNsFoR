import re

pattern_handler_map = {
    "\\d+\\[\\d+\\]\\[\\d+,\\d+\\]([\\+-]\\d+\\[\\d+\\]\\[\\d+,\\d+\\])*->\\d+\\[\\d+\\]\\[\\d+,\\d+\\]": "point_to_point",
    "\\d+\\[\\d+\\]\\[\\d+,\\d+\\.\\.\\.\\]->\\d+\\[\\d+\\]\\[\\d+,\\d+\\.\\.\\.\\]": "row_to_row",
    "\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]->\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]": "col_to_col",
    "\\d+\\[\\d+\\]\\[\\d+,\\d+\\.\\.\\.\\]->\\d+\\[\\d+\\]\\[\\d+,\\d+\\]": "row_summary",
    "\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]->\\d+\\[\\d+\\]\\[\\d+,\\d+\\]": "col_summary",
    "\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\]([\\+-]\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\])*->\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\]": "map_col_operator",
    "\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\]([\\+-]\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\])*->\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\]": "search_row_based_col_operator"
}


def match(line):
    for key in pattern_handler_map:
        if re.match(key, line):
            return pattern_handler_map[key]


# s = "\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\](\\+\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\])*->\\d+\\[\\d+\\]\\[\\d+\\.\\.\\.,\\d+\\]\\[\\d+\\]"
# res = re.match(s, "1[1][1...,1][1]->2[2][2...,2][2]")
# print(res.group(1))
# str = match("1[1][1...,1][1]->1[1][1...,1][1]")
# print(str)
# res = re.findall(r'(\d+)\[(\d+)\]\[(\d+)\.\.\.,(\d+)\]\[(\d+)\]', "1[1][1...,1][1]-1[1][1...,1][1]->2[2][2...,2][2]")
# print(res)


# search_row_based_col_operator
# reg = "\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\]([\\+-]\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\])*->\\d+\\[\\d+\\]\\[\\d+\\[.*\\],\\d+\\]"
# a = re.match(reg, "1[1][1[内容],2]->2[2][1[内容],2]")
# print(bool(a))
# b = re.match(reg, "1[1][1[内容],2]+2[2][1[内容],2]->3[3][1[内容],2]")
# print(bool(b))

